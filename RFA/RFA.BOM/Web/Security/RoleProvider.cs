//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// CodeFluent Entities generated (http://www.softfluent.com). Date: Friday, 07 November 2014 18:21. Build: 1.0.61214.0773
namespace RFA.Web.Security
{
	using System;
	using System.Collections.Generic;
	using System.Configuration.Provider;
	using System.Web;
	using System.Web.Security;

    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0773")]
    public partial class RoleProvider: System.Web.Security.RoleProvider
    {
        private const string applicationName = "RoleProvider$RFA";
        private static RoleProvider _current;

        private string _applicationName = applicationName;

        public override string ApplicationName
        {
            get
            {
                return _applicationName;
            }
            set
            {
                _applicationName = value;
            }
        }

        public static RoleProvider Current
        {
			get
			{
				if (_current == null)
				{
					foreach(System.Web.Security.RoleProvider provider in Roles.Providers)
					{
						_current = provider as RoleProvider;
						if (_current != null)
							break;
					}
					if (_current == null)
						throw new ProviderException(RFA.Resources.Manager.GetStringWithDefault("ProviderNotFound", "No provider of type RFA.Web.Security.RoleProvider was found."));
				}
				return _current;
			}			
        }

		public override void AddUsersToRoles(string[] usernames, string[] roleNames)
		{
			if (usernames == null)
				throw new ArgumentNullException("usernames");

			if (roleNames == null)
				throw new ArgumentNullException("roleNames");
				
			List<global::Security.User> users = new List<global::Security.User>(usernames.Length);
			foreach(string username in usernames)
			{
				if (username == null)
					continue;
					
				global::Security.User user = global::Security.User.LoadByUserName(username);
				if (user == null)
					throw new ProviderException(RFA.Resources.Manager.GetStringWithDefault("UserNotFound", "User '{0}' was not found.", new object[]{username}));
					
				users.Add(user);
			}
			
			foreach(string roleName in roleNames)
			{
				if (roleName == null)
					continue;
					
				global::Security.Role role = global::Security.Role.LoadByName(roleName);
				if (role == null)
					throw new ProviderException(RFA.Resources.Manager.GetStringWithDefault("RoleNotFound", "Role '{0}' was not found.", new object[]{roleName}));

				
				foreach(global::Security.User user in users)
				{
					if (!role.Users.Contains(user))
					{
						role.Users.Add(user);
					}
				}
				role.Save();
				
			}
		}
		
		public override void CreateRole(string roleName)
		{
			if (string.IsNullOrEmpty(roleName))
				throw new ArgumentNullException("roleName");
				
			global::Security.Role role = new global::Security.Role();
			role.Name = roleName;
			try
			{
				role.Save();
			}
            catch(CodeFluent.Runtime.CodeFluentDuplicateException)
            {
				throw new ProviderException(RFA.Resources.Manager.GetStringWithDefault("RoleAlreadyExists", "Role '{0}' already exists.", new object[]{roleName}));
            }
		}
		
		public override bool DeleteRole(string roleName, bool throwOnPopulatedRole)
		{
			if (string.IsNullOrEmpty(roleName))
				throw new ArgumentNullException("roleName");
				
			global::Security.Role role = global::Security.Role.LoadByName(roleName);
			if (role == null)
				return false;

			if (throwOnPopulatedRole)
			{
				if (role.Users.Count > 0)
					throw new ProviderException(RFA.Resources.Manager.GetStringWithDefault("RoleHasUsers", "Role has associated users."));
			}
			return role.Delete();
		}
		
		public override string[] FindUsersInRole(string roleName, string usernameToMatch)
		{
			return GetUserNames(global::Security.UserCollection.FindByRoleAndUserName(roleName, usernameToMatch));
		}
		
		
		
		private string[] GetRoleNames(global::Security.RoleCollection roles)
		{
            string[] names = new string[roles.Count];
            for(int i = 0; i < roles.Count; i++)
            {
                names[i] = roles[i].Name;
            }
            return names;
		}

		private string[] GetUserNames(global::Security.UserCollection users)
		{
            string[] names = new string[users.Count];
            for(int i = 0; i < users.Count; i++)
            {
                names[i] = users[i].UserName;
            }
            return names;
		}
		
		public override string[] GetAllRoles()
		{
			return GetRoleNames(global::Security.RoleCollection.LoadAll());
		}
		
		public override string[] GetRolesForUser(string username)
		{
			if (string.IsNullOrEmpty(username))
				throw new ArgumentNullException("username");
				
            global::Security.User user = global::Security.User.LoadByUserName(username);
			if (user == null)
				throw new ProviderException(RFA.Resources.Manager.GetStringWithDefault("UserNotFound", "User was not found."));
				
			return GetRoleNames(user.Roles);
		}
		
		public override string[] GetUsersInRole(string roleName)
		{
			if (string.IsNullOrEmpty(roleName))
				throw new ArgumentNullException("roleName");
				
            global::Security.Role role = global::Security.Role.LoadByName(roleName);
			if (role == null)
				throw new ProviderException(RFA.Resources.Manager.GetStringWithDefault("RoleNotFound", "Role was not found."));
				
			return GetUserNames(role.Users);
		}
		
		public override bool IsUserInRole(string username, string roleName)
		{
			if (string.IsNullOrEmpty(username))
				throw new ArgumentNullException("username");
				
			if (string.IsNullOrEmpty(roleName))
				throw new ArgumentNullException("roleName");
			
			
            global::Security.Role role = global::Security.Role.LoadByName(roleName);
			if (role == null)
				throw new ProviderException(RFA.Resources.Manager.GetStringWithDefault("RoleNotFound", "Role was not found."));
				
			return (role.Users[username] != null);
			
		}
		
		public override void RemoveUsersFromRoles(string[] usernames, string[] roleNames)
		{
			if (usernames == null)
				throw new ArgumentNullException("usernames");

			if (roleNames == null)
				throw new ArgumentNullException("roleNames");

			List<global::Security.User> users = new List<global::Security.User>(usernames.Length);
			foreach(string username in usernames)
			{
				if (username == null)
					continue;
					
				global::Security.User user = global::Security.User.LoadByUserName(username);
				if (user == null)
					throw new ProviderException(RFA.Resources.Manager.GetStringWithDefault("UserNotFound", "User '{0}' was not found.", new object[]{username}));
					
				users.Add(user);
			}
			
			foreach(string roleName in roleNames)
			{
				if (roleName == null)
					continue;
				global::Security.Role role = global::Security.Role.LoadByName(roleName);
				if (role == null)
					throw new ProviderException(RFA.Resources.Manager.GetStringWithDefault("RoleNotFound", "Role '{0}' was not found.", new object[]{roleName}));

				
				foreach(global::Security.User user in users)
				{
					if (role.Users.Contains(user))
					{
						role.Users.Remove(user);
					}
				}
				role.Save();
				
			}
		}
		
		public override bool RoleExists(string roleName)
		{
			if (string.IsNullOrEmpty(roleName))
				throw new ArgumentNullException("roleName");
				
            return (global::Security.Role.LoadByName(roleName) != null);
		}

		public override void Initialize(string name, System.Collections.Specialized.NameValueCollection config)
		{
			if (config == null)
				throw new ArgumentNullException("config");
				
			if (string.IsNullOrEmpty(name))
			{
				name = "RFARoleProvider";
			}
			if (string.IsNullOrEmpty(config["description"]))
			{
				config.Remove("description");
				config.Add("description", RFA.Resources.Manager.GetStringWithDefault("RoleProviderDescription", "RFA"));
			}
			base.Initialize(name, config);

			_applicationName = config["applicationName"];
			if (string.IsNullOrEmpty(_applicationName))
			{
				_applicationName = applicationName;
			}

			config.Remove("applicationName");
			config.Remove("name");
		}
    }
}
