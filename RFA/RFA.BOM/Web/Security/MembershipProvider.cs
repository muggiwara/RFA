//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// CodeFluent Entities generated (http://www.softfluent.com). Date: Friday, 07 November 2014 18:38. Build: 1.0.61214.0773False
namespace RFA.Web.Security
{
	using System;
	using System.Configuration.Provider;
	using System.Globalization;
	using System.Security;
	using System.Security.Cryptography;
	using System.Security.Principal;
	using System.Text;
	using System.Text.RegularExpressions;
	using System.Threading;
	using System.Web;
	using System.Web.Security;
	using CodeFluent.Runtime.Utilities;

    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0773")]
    public partial class Principal: GenericPrincipal
    {
		public Principal(RFA.Web.Security.Identity identity)
			:base(identity, GetRoles(identity))
		{
			if (identity == null)
				throw new ArgumentNullException("identity");
		}
		
		private static string[] GetRoles(RFA.Web.Security.Identity identity)
		{
			if (identity == null)
				return new string[0];
            
            string[] roles = new string[identity.User.Roles.Count];
            for(int i = 0; i < identity.User.Roles.Count; i++)
            {
				
                roles[i] = identity.User.Roles[i].Name;
                
            }
            return roles;
            
		}
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0773")]
    public partial class Identity: GenericIdentity
    {
		private global::Security.User _user;

		public Identity(global::Security.User user)
			:base(GetName(user), "RFA")
		{
			_user = user;
		}
		
		private static string GetName(global::Security.User user)
		{
			if (user == null)
				throw new ArgumentNullException("user");
				
			return user.UserName;
		}
		
		public global::Security.User User
		{
			get
			{
				return _user;
			}
		}

		public static RFA.Web.Security.Identity Current
		{
			get
			{
	            return From(Thread.CurrentPrincipal.Identity);
			}
		}
		
		public static RFA.Web.Security.Identity From(IIdentity identity)
		{
			return identity as RFA.Web.Security.Identity;
		}
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0773")]
    public partial class MembershipProvider: System.Web.Security.MembershipProvider
    {
        private const string applicationName = "MembershipProvider$RFA";
        private static MembershipProvider _current;
		private bool _enablePasswordRetrieval;
		private bool _enablePasswordReset;
		private bool _requiresQuestionAndAnswer;
		private bool _requiresUniqueEmail;
		private bool _updateLastActivity;
		private int _maxInvalidPasswordAttempts;
		private int _passwordAttemptWindow;
		private int _minRequiredPasswordLength;
		private int _minRequiredNonAlphanumericCharacters;
		private string _passwordStrengthRegularExpression;
		private MembershipPasswordFormat _passwordFormat;

        private string _applicationName = applicationName;

        public override string ApplicationName
        {
            get
            {
                return _applicationName;
            }
            set
            {
                _applicationName = value;
            }
        }
        
        public static MembershipProvider Current
        {
			get
			{
				if (_current == null)
				{
					foreach(System.Web.Security.MembershipProvider provider in Membership.Providers)
					{
						_current = provider as MembershipProvider;
						if (_current != null)
							break;
					}
					if (_current == null)
						throw new ProviderException(RFA.Resources.Manager.GetStringWithDefault("ProviderNotFound", "No provider of type 'RFA.Web.Security.MembershipProvider' was found."));
				}
				return _current;
			}			
        }
        
		protected virtual void SetAttempt(global::Security.User user, bool reset)
		{
	 		
			if (reset)
			{
				user.IsLockedOut = false;
				user.LastLockoutDate = DateTime.MinValue;
				user.FailedPasswordAttemptCount = 0;
				user.FailedPasswordAttemptWindowStart = DateTime.MinValue;
			}
			else
			{
				DateTime time = DateTime.UtcNow; time = new DateTime(time.Year, time.Month, time.Day, time.Hour, time.Minute, time.Second);
				if (time > user.FailedPasswordAttemptWindowStart.AddMinutes(PasswordAttemptWindow))
				{
					user.FailedPasswordAttemptCount = 1;
					user.FailedPasswordAttemptWindowStart = time;
				}
				else
				{
					user.FailedPasswordAttemptCount++;
				}
				
				if (user.FailedPasswordAttemptCount >= MaxInvalidPasswordAttempts)
				{
					user.IsLockedOut = true;
					user.LastLockoutDate = time;
				}
			}
			
		}

		protected virtual void SetAnswerAttempt(global::Security.User user, bool reset)
		{
			
		}

		protected virtual string GenerateSalt()
		{
			byte[] data = new byte[16];
			new RNGCryptoServiceProvider().GetBytes(data);
			return Convert.ToBase64String(data);
		}

		protected virtual string EncodePassword(string password, string salt)
		{
			if (password == null)
				return null;
				
			if (PasswordFormat == MembershipPasswordFormat.Clear)
				return password;
				
			byte[] passwordBytes = Encoding.Unicode.GetBytes(password);
			byte[] saltBytes;
			if (salt != null)
			{
				saltBytes = Convert.FromBase64String(salt);
			}
			else
			{
				saltBytes = new byte[0];
			}
			byte[] bytes = new byte[passwordBytes.Length + saltBytes.Length];
			Buffer.BlockCopy(saltBytes, 0, bytes, 0, saltBytes.Length);
			Buffer.BlockCopy(passwordBytes, 0, bytes, saltBytes.Length, passwordBytes.Length);
			if (PasswordFormat == MembershipPasswordFormat.Hashed)
			{
                HashAlgorithm algorithm;
                string hashName;
                if (string.IsNullOrEmpty(Membership.HashAlgorithmType))
                {
                    hashName = "System.Security.Cryptography.HashAlgorithm";
                }
                else
                {
                    hashName = Membership.HashAlgorithmType;
                }

                if (!SecurityUtilities.IsRepeatableHashAlgorithm(hashName))
                {
                    hashName = "SHA1";
                }
                algorithm = HashAlgorithm.Create(hashName);
                return Convert.ToBase64String(algorithm.ComputeHash(bytes));
			}
			return Convert.ToBase64String(EncryptPassword(bytes));
		}

		protected virtual string UnencodePassword(string password)
		{
			if (password == null)
				return null;
				
			if (PasswordFormat == MembershipPasswordFormat.Clear)
				return password;

			if (PasswordFormat == MembershipPasswordFormat.Hashed)
				throw new ProviderException(RFA.Resources.Manager.GetStringWithDefault("CannotDecodeHashedPassword", "Membership Provider can not decode hashed password"));
			
			byte[] encodedPassword = Convert.FromBase64String(password);
			byte[] bytes = DecryptPassword(encodedPassword);
			if (bytes == null)
				return null;

			return Encoding.Unicode.GetString(bytes, 16, bytes.Length - 16);
		}

		public override void Initialize(string name, System.Collections.Specialized.NameValueCollection config)
		{
			if (config == null)
				throw new ArgumentNullException("config");
				
			if (string.IsNullOrEmpty(name))
			{
				name = "RFAMembershipProvider";
			}
			if (string.IsNullOrEmpty(config["description"]))
			{
				config.Remove("description");
				config.Add("description", RFA.Resources.Manager.GetStringWithDefault("MembershipProviderDescription", "RFA"));
			}
			base.Initialize(name, config);
			_enablePasswordRetrieval = ConvertUtilities.ToBoolean(config["enablePasswordRetrieval"], false);
			_enablePasswordReset = ConvertUtilities.ToBoolean(config["enablePasswordReset"], true);
			_requiresUniqueEmail = true; // cannot be changed here
			_requiresQuestionAndAnswer = ConvertUtilities.ToBoolean(config["requiresQuestionAndAnswer"], false);
			_updateLastActivity = ConvertUtilities.ToBoolean(config["updateLastActivity"], true);
			
			
			if (_requiresQuestionAndAnswer)
				throw new ProviderException(RFA.Resources.Manager.GetStringWithDefault("UnsupportedRequiresQuestionAndAnswer", "Membership provider only supports requiresQuestionAndAnswer set to false."));
			
			
			_maxInvalidPasswordAttempts = ConvertUtilities.ToInt32(config["maxInvalidPasswordAttempts"], 5);
			_passwordAttemptWindow = ConvertUtilities.ToInt32(config["passwordAttemptWindow"], 10);
			_minRequiredPasswordLength = ConvertUtilities.ToInt32(config["minRequiredPasswordLength"], 4);
			_minRequiredNonAlphanumericCharacters = ConvertUtilities.ToInt32(config["minRequiredNonalphanumericCharacters"], 0);
			_passwordStrengthRegularExpression = ConvertUtilities.ToString(config["passwordStrengthRegularExpression"], "", true);
			if (_minRequiredNonAlphanumericCharacters > _minRequiredPasswordLength)
				throw new ProviderException(RFA.Resources.Manager.GetStringWithDefault("MinNonAlphanMoreThanMinRequiredPassword", "MinRequiredNonalphanumericCharacters can not be more than MinRequiredPasswordLength."));

			_applicationName = config["applicationName"];
			if (string.IsNullOrEmpty(_applicationName))
			{
				_applicationName = applicationName;
			}
			
			_passwordFormat = (MembershipPasswordFormat)ConvertUtilities.ToEnum(config["passwordFormat"], MembershipPasswordFormat.Hashed);
			if ((_passwordFormat == MembershipPasswordFormat.Hashed) && (_enablePasswordRetrieval))
				throw new ProviderException(RFA.Resources.Manager.GetStringWithDefault("CannotRetrieveHash", "Membership provider can not retrieve hashed passwords."));

			config.Remove("enablePasswordRetrieval");
			config.Remove("enablePasswordReset");
			config.Remove("requiresQuestionAndAnswer");
			config.Remove("applicationName");
			config.Remove("requiresUniqueEmail");
			config.Remove("maxInvalidPasswordAttempts");
			config.Remove("passwordAttemptWindow");
			config.Remove("passwordFormat");
			config.Remove("name");
			config.Remove("minRequiredPasswordLength");
			config.Remove("minRequiredNonalphanumericCharacters");
			config.Remove("passwordStrengthRegularExpression");
			config.Remove("updateLastActivity");
		}

        public override bool ChangePasswordQuestionAndAnswer(string username, string password, string newPasswordQuestion, string newPasswordAnswer)
        {
			
			throw new NotImplementedException();
			
        }
        
        protected virtual bool CheckPassword(global::Security.User user, string password)
        {
			
			string encodedPassword = EncodePassword(password, user.PasswordSalt);
			
			
			return (encodedPassword == user.Password);
        }

        public override bool ChangePassword(string username, string oldPassword, string newPassword)
        {
			if ((string.IsNullOrEmpty(username)) || (username.Length > 256))
				throw new ArgumentNullException("username");

			if ((string.IsNullOrEmpty(oldPassword)) || (oldPassword.Length > 256))
				throw new ArgumentNullException("oldPassword");

			if ((string.IsNullOrEmpty(newPassword)) || (newPassword.Length > 256))
				throw new ArgumentNullException("newPassword");
			
			if (newPassword.Length < MinRequiredPasswordLength)
				throw new ArgumentException(RFA.Resources.Manager.GetStringWithDefault("PasswordTooShort", "Password is too short. Minimum length is {0}", new object[]{MinRequiredPasswordLength}));

			int min = 0;
			for (int i = 0; i < newPassword.Length; i++)
			{
				if (!char.IsLetterOrDigit(newPassword, i))
				{
					min++;
				}
			}
			if (min < MinRequiredNonAlphanumericCharacters)
				throw new ArgumentException(RFA.Resources.Manager.GetStringWithDefault("PasswordTooAlpha", "Password needs more non alpha numeric characters. Minimum is {0}", new object[]{MinRequiredNonAlphanumericCharacters}));

			if ((PasswordStrengthRegularExpression.Length > 0) && !Regex.IsMatch(newPassword, PasswordStrengthRegularExpression))
				throw new ArgumentException(RFA.Resources.Manager.GetStringWithDefault("PasswordInvalid", "Password does not match regular expression"));

            global::Security.User user = global::Security.User.LoadByUserName(username);
            if (user == null)
                return false;

            if (!CheckPassword(user, oldPassword))
            {
				SetAttempt(user, false);
				user.Save();
                return false;
			}

			
			string encodedPassword = EncodePassword(newPassword, user.PasswordSalt);
			
			if (encodedPassword.Length > 256)
			{
				SetAttempt(user, false);
				user.Save();
				throw new ArgumentException(RFA.Resources.Manager.GetStringWithDefault("PasswordTooLong", "Password is too long"));
			}

			ValidatePasswordEventArgs e = new ValidatePasswordEventArgs(username, encodedPassword, false);
			OnValidatingPassword(e);
			if (e.Cancel)
			{
				if (e.FailureInformation != null)
				{
					throw e.FailureInformation;
				}
				throw new ArgumentException(RFA.Resources.Manager.GetStringWithDefault("PasswordInvalidCustom", "Password is invalid"));
			}

            user.Password = encodedPassword;
            user.Save();
            return true;
        }

        public override System.Web.Security.MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, out MembershipCreateStatus status)
        {
            global::Security.User user = new global::Security.User();
            if (providerUserKey != null)
            {
				if (providerUserKey is System.Guid)
				{
		            user.Id = (System.Guid)providerUserKey;
				}
				else
				{
					status = MembershipCreateStatus.InvalidProviderUserKey;
					return null;
				}
			}

			email = ConvertUtilities.Nullify(email, true);
			if ((email != null) && (email.Length > 256))
			{
				status = MembershipCreateStatus.InvalidEmail;
				return null;
			}
			
			if ((email == null) && RequiresUniqueEmail)
			{
				status = MembershipCreateStatus.InvalidEmail;
				return null;
			}
            user.Email = email;

			password = ConvertUtilities.Nullify(password, true);
            
            user.PasswordSalt = GenerateSalt();
			string encodedPassword = EncodePassword(password, user.PasswordSalt);
            
			if ((password == null) || (password.Length > 256))
			{
				status = MembershipCreateStatus.InvalidPassword;
				return null;
			}
            user.Password = encodedPassword;

			username = ConvertUtilities.Nullify(username, true);
			if ((username == null) || (username.Length > 256))
			{
				status = MembershipCreateStatus.InvalidUserName;
				return null;
			}
            user.UserName = username;

			DateTime time = DateTime.UtcNow; time = new DateTime(time.Year, time.Month, time.Day, time.Hour, time.Minute, time.Second);

            
            user.IsLockedOut = false;
            
            user.LastLoginDate = time;
            user.LastActivityDate = time;
            user.LastPasswordChangeDate = time;
            user.LastLockoutDate = DateTime.MinValue;

			
            
			if (password.Length < MinRequiredPasswordLength)
			{
				status = MembershipCreateStatus.InvalidPassword;
				return null;
			}

			int min = 0;
			for (int i = 0; i < password.Length; i++)
			{
				if (!char.IsLetterOrDigit(password, i))
				{
					min++;
				}
			}
			if (min < MinRequiredNonAlphanumericCharacters)
			{
				status = MembershipCreateStatus.InvalidPassword;
				return null;
			}

			if ((!string.IsNullOrEmpty(PasswordStrengthRegularExpression)) &&
				(!Regex.IsMatch(password, PasswordStrengthRegularExpression)))
			{
				status = MembershipCreateStatus.InvalidPassword;
				return null;
			}

			ValidatePasswordEventArgs e = new ValidatePasswordEventArgs(username, password, true);
			OnValidatingPassword(e);
			if (e.Cancel)
			{
				status = MembershipCreateStatus.InvalidPassword;
				return null;
			}

            try
            {
                user.Save();
            }
            catch(CodeFluent.Runtime.CodeFluentDuplicateException)
            {
                status = MembershipCreateStatus.DuplicateProviderUserKey;
                return null;
            }

            status = MembershipCreateStatus.Success;
            return MembershipUserFromUser(user);
        }

        public override bool DeleteUser(string username, bool deleteAllRelatedData)
        {
			if (username == null)
				throw new ArgumentNullException("username");
				
            global::Security.User user = global::Security.User.LoadByUserName(username);
            if (user == null)
                return false;

            return user.Delete();
        }

        public override bool EnablePasswordReset
        {
            get
            {
                return _enablePasswordReset;
            }
        }

        public override bool EnablePasswordRetrieval
        {
            get
            {
                return _enablePasswordRetrieval;
            }
        }
        
        public virtual bool UpdateLastActivity
        {
			get
			{
                return _updateLastActivity;
			}
        }

        public virtual MembershipUser MembershipUserFromUser(global::Security.User user)
        {
            if (user == null)
                return null;

            return new MembershipUser(Name,
                    user.UserName,
                    user.Id,
                    user.Email,
                    null,
                    null,
                    true,
                    user.IsLockedOut,
                    DateTime.MinValue,
                    user.LastLoginDate,
                    user.LastActivityDate,
                    user.LastPasswordChangeDate,
                    user.LastLockoutDate
                    );
        }

        public virtual MembershipUserCollection MembershipUserCollectionFromCollection(global::Security.UserCollection users)
        {
            MembershipUserCollection musers = new MembershipUserCollection();
            foreach (global::Security.User user in users)
            {
                musers.Add(MembershipUserFromUser(user));
            }
            return musers;
        }

        public override MembershipUserCollection FindUsersByEmail(string emailToMatch, int pageIndex, int pageSize, out int totalRecords)
        {
            global::Security.UserCollection users = global::Security.UserCollection.PageFindByEmail(pageIndex, pageSize, null, emailToMatch);
            MembershipUserCollection musers = MembershipUserCollectionFromCollection(users);
			if ((musers.Count == 0) || (musers.Count < pageSize))
			{
	            totalRecords = pageSize * pageIndex + musers.Count;
			}
			else
			{
	            totalRecords = pageSize * (pageIndex + 1) + 1; // force next page read
            }
            return musers;
        }

        public override MembershipUserCollection FindUsersByName(string usernameToMatch, int pageIndex, int pageSize, out int totalRecords)
        {
            global::Security.UserCollection users = global::Security.UserCollection.PageFindByUserName(pageIndex, pageSize, null, usernameToMatch);
            MembershipUserCollection musers = MembershipUserCollectionFromCollection(users);
			if ((musers.Count == 0) || (musers.Count < pageSize))
			{
	            totalRecords = pageSize * pageIndex + musers.Count;
			}
			else
			{
	            totalRecords = pageSize * (pageIndex + 1) + 1; // force next page read
            }
            return musers;
        }

        public override MembershipUserCollection GetAllUsers(int pageIndex, int pageSize, out int totalRecords)
        {
            global::Security.UserCollection users = global::Security.UserCollection.PageLoadAll(pageIndex, pageSize, null);
            MembershipUserCollection musers = MembershipUserCollectionFromCollection(users);
			if ((musers.Count == 0) || (musers.Count < pageSize))
			{
	            totalRecords = pageSize * pageIndex + musers.Count;
			}
			else
			{
	            totalRecords = pageSize * (pageIndex + 1) + 1; // force next page read
            }
            return musers;
        }

        public override int GetNumberOfUsersOnline()
        {
			
			return global::Security.UserCollection.CountOnline(Membership.UserIsOnlineTimeWindow);
			
        }

        public override System.Web.Security.MembershipUser GetUser(string username, bool userIsOnline)
        {
			if (username == null)
				throw new ArgumentNullException("username");
				
            global::Security.User user = global::Security.User.LoadByUserName(username);
            if (user == null)
                return null;

			
            if (userIsOnline)
            {
				UpdateActivity(user, false);
            }
			

            return MembershipUserFromUser(user);
        }

        public override System.Web.Security.MembershipUser GetUser(object providerUserKey, bool userIsOnline)
        {
            if (providerUserKey == null)
				throw new ArgumentNullException("providerUserKey");
				
			if (!(providerUserKey is System.Guid))
				throw new ArgumentException(RFA.Resources.Manager.GetStringWithDefault("InvalidProviderUserKeyType", "Invalid providerUserKey type"), "providerUserKey");

            global::Security.User user = global::Security.User.Load((System.Guid)providerUserKey);
            if (user == null)
                return null;

			
            if (userIsOnline)
            {
				UpdateActivity(user, false);
            }
			

            return MembershipUserFromUser(user);
        }

        public override string GetUserNameByEmail(string email)
        {
			if (string.IsNullOrEmpty(email))
				return null;
				
            global::Security.User user = global::Security.User.LoadByEmail(email);
            if (user == null)
                return null;

			return user.UserName;
        }

        public override int MaxInvalidPasswordAttempts
        {
            get
            {
                return _maxInvalidPasswordAttempts;
            }
        }

        public override int MinRequiredNonAlphanumericCharacters
        {
            get
            {
                return _minRequiredNonAlphanumericCharacters;
            }
        }

        public override int MinRequiredPasswordLength
        {
            get
            {
                return _minRequiredPasswordLength;
            }
        }

        public override int PasswordAttemptWindow
        {
            get
            {
                return _passwordAttemptWindow;
            }
        }

        public override MembershipPasswordFormat PasswordFormat
        {
            get
            {
                return _passwordFormat;
            }
        }

        public override string PasswordStrengthRegularExpression
        {
            get
            {
                return _passwordStrengthRegularExpression;
            }
        }

        public override bool RequiresQuestionAndAnswer
        {
            get
            {
                return _requiresQuestionAndAnswer;
            }
        }

        public override bool RequiresUniqueEmail
        {
            get
            {
                return _requiresUniqueEmail;
            }
        }

        public override string ResetPassword(string username, string passwordAnswer)
        {
			if (!EnablePasswordReset)
				throw new NotSupportedException(RFA.Resources.Manager.GetStringWithDefault("PasswordResetUnsupported", "Membership provider is not configured to support password resets."));
				
			global::Security.User user = global::Security.User.LoadByUserName(username);
			if (user == null)
				throw new ProviderException(RFA.Resources.Manager.GetStringWithDefault("UserNotFound", "User '" + username + "' was not found."));
				
			

			
			if (user.IsLockedOut)
				throw new MembershipPasswordException(RFA.Resources.Manager.GetStringWithDefault("UserLockedOut", "User '" + username + "' is locked out."));
			

			string password = Membership.GeneratePassword(MinRequiredPasswordLength, MinRequiredNonAlphanumericCharacters);
			
			user.Password = EncodePassword(password, user.PasswordSalt);
			
            
			ValidatePasswordEventArgs e = new ValidatePasswordEventArgs(username, user.Password, false);
			OnValidatingPassword(e);
			if (e.Cancel)
			{
				if (e.FailureInformation != null)
				{
					throw e.FailureInformation;
				}
				throw new ProviderException(RFA.Resources.Manager.GetStringWithDefault("PasswordInvalidCustom", "Password is invalid"));
			}
			
            user.Save();
            return password;
        }

        public override bool UnlockUser(string username)
        {
            global::Security.User user = global::Security.User.LoadByUserName(username);
            if (user == null)
                return false;
            
			
			SetAttempt(user, true);
			
            user.Save();
			
            return true;
        }

        public override void UpdateUser(System.Web.Security.MembershipUser member)
        {
            global::Security.User user = global::Security.User.LoadByUserName(member.UserName);
            if (user == null)
                return;

			
			user.Email = member.Email;
			
			user.LastLoginDate = member.LastLoginDate.ToUniversalTime();
			user.LastActivityDate = member.LastActivityDate.ToUniversalTime();
            user.Save();
        }

		public override string GetPassword(string username, string passwordAnswer)
		{
			if (!EnablePasswordRetrieval)
				throw new NotSupportedException(RFA.Resources.Manager.GetStringWithDefault("PasswordRetrievalUnsupported", "Membership provider does not support password retrieval."));

			if (username == null)
				throw new ArgumentNullException("username");
				
			if (RequiresQuestionAndAnswer)
			{
				if (passwordAnswer == null)
					throw new ArgumentNullException("passwordAnswer");
			}

			global::Security.User user = global::Security.User.LoadByUserName(username);
            if (user == null)
				throw new ProviderException(RFA.Resources.Manager.GetStringWithDefault("UserNotFound", "User '" + username + "' was not found."));

			
			return user.Password;
			
		}
		
        public override bool ValidateUser(string username, string password)
        {
            return (ValidateAndGetUser(username, password, true) != null);
        }
        
        public static void UpdateUserActivity(global::Security.User user, bool login)
        {
			if (user == null)
				throw new ArgumentNullException("user");
				
			DateTime time = DateTime.UtcNow; time = new DateTime(time.Year, time.Month, time.Day, time.Hour, time.Minute, time.Second);
			if (login) {user.LastLoginDate = time;}
			user.LastActivityDate = time;
			
			
        }

		public virtual void UpdateActivity(global::Security.User user, bool login)
		{
			if (user == null)
				throw new ArgumentNullException("user");
				
			UpdateUserActivity(user, login);
				
			
			if (UpdateLastActivity)
			{
				global::Security.User.UpdateActivity(user.Id, user.LastActivityDate, user.LastLoginDate);
			}
			
		}

        public virtual global::Security.User ValidateAndGetUser(string username, string password, bool login)
        {
			if (username == null)
				throw new ArgumentNullException("username");

			if (password == null)
				throw new ArgumentNullException("password");
			
			global::Security.User user = global::Security.User.LoadByUserName(username);
            if (user == null)
                return null;

			

			
            if (user.IsLockedOut)
                return null;
            

			
			string encodedPassword = EncodePassword(password, user.PasswordSalt);
			
			
			if (encodedPassword != user.Password)
			{
				SetAttempt(user, false);
				user.Save();
				return null;
			}
			
			UpdateActivity(user, login);
            return user;
        }
    }
}
